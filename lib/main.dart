// -----------------------------------------------------------------------------
// --- IMPORTS -----------------------------------------------------------------
// -----------------------------------------------------------------------------

// Core Flutter material design library.
import 'package:flutter/material.dart';

// Firebase core for initialization.
import 'package:firebase_core/firebase_core.dart';

// Riverpod for state management.
import 'package:flutter_riverpod/flutter_riverpod.dart';

// The Firebase configuration file generated by the FlutterFire CLI.
import 'firebase_options.dart';

// Our custom design tokens and theme constants.
import 'src/core/theme/app_theme.dart';

// The main application shell widget which contains the bottom navigation.
import 'src/app/shell.dart';

// --- NEW IMPORTS ---
import 'dart:io'; // Used to check the operating system.
import 'src/features/workout/application/wear_timer_sync_service.dart';

// -----------------------------------------------------------------------------
// --- APP ENTRY POINT (MODIFIED) ----------------------------------------------
// -----------------------------------------------------------------------------

/// The main function is the entry point for the application.
Future<void> main() async {
  // Ensure that the Flutter binding is initialized before calling native code.
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase using the platform-specific options.
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // --- NEW: Initialize Riverpod container and services ---
  // Create a ProviderContainer to manage our application's state.
  final container = ProviderContainer();

  // Initialize the Wear OS sync service only on the Android platform.
  // This prevents errors when running on iOS in the future.
  if (Platform.isAndroid) {
    // We read the provider to create the service instance and then call its
    // async init() method to configure the underlying native APIs.
    await container.read(wearTimerSyncServiceProvider).init();
  }

  // Run the app within an UncontrolledProviderScope to use the pre-initialized container.
  runApp(
    UncontrolledProviderScope(
      container: container,
      child: const FairwareLiftApp(),
    ),
  );
}

// -----------------------------------------------------------------------------
// --- ROOT WIDGET -------------------------------------------------------------
// -----------------------------------------------------------------------------

/// The root widget of the Fairware Lift application.
/// This widget sets up the MaterialApp and defines the global theme.
class FairwareLiftApp extends StatelessWidget {
  const FairwareLiftApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      // --- THEME CONFIGURATION (from SSOT) ---
      // We use the ThemeData.dark() constructor as a base and then override
      // it with the specific colors and typography from our AppTheme class.
      theme: ThemeData.dark().copyWith(
        // Background and surface colors.
        scaffoldBackgroundColor: AppTheme.colors.background,
        appBarTheme: AppBarTheme(
          backgroundColor: AppTheme.colors.surface,
          elevation: 0,
        ),
        cardColor: AppTheme.colors.surface,

        // Primary accent color.
        colorScheme: ColorScheme.dark(
          primary: AppTheme.colors.accent,
          secondary: AppTheme.colors.accent,
          surface: AppTheme.colors.surface,
          background: AppTheme.colors.background,
          error: AppTheme.colors.danger,
        ),

        // Text theme.
        textTheme: TextTheme(
          displayLarge: AppTheme.typography.display,
          titleLarge: AppTheme.typography.title,
          bodyLarge: AppTheme.typography.body,
          bodyMedium: AppTheme.typography.body.copyWith(fontSize: 14),
          labelLarge: AppTheme.typography.body.copyWith(fontWeight: FontWeight.bold),
          bodySmall: AppTheme.typography.caption,
        ),

        // Component themes.
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: AppTheme.colors.accent,
            foregroundColor: AppTheme.colors.textPrimary,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(AppTheme.sizing.buttonRadius),
            ),
            padding: EdgeInsets.symmetric(
              vertical: AppTheme.sizing.baseGrid * 1.5, // 12pt
              horizontal: AppTheme.sizing.verticalRhythm, // 24pt
            ),
          ),
        ),
      ),

      // --- HOME SCREEN ---
      // The 'home' is now our AppShell, which handles the main navigation.
      home: const AppShell(),
    );
  }
}